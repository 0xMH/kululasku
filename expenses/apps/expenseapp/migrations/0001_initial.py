# Generated by Django 2.2 on 2020-01-30 14:42

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_iban.fields
import expenseapp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountDimension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('code', models.CharField(help_text='Account dimension code(s). If multiple, separate with semicolons (;).', max_length=5, verbose_name='Account dimension code')),
            ],
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^\\S+( \\S+)+$', 'Enter your first and last name.'), django.core.validators.MinLengthValidator(6), django.core.validators.MaxLengthValidator(255)], verbose_name='Name')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='Email address')),
                ('cc_email', models.EmailField(blank=True, help_text='If entered, a notification about the expense application will be sent to this address without personal details except name.', max_length=254, null=True, validators=[django.core.validators.EmailValidator()], verbose_name='CC email address')),
                ('phone', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^\\+?[0-9]{7,13}', 'Enter a valid phone number without any spaces or dashes.')], verbose_name='Phone')),
                ('address', models.CharField(max_length=255, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(255)], verbose_name='Address')),
                ('iban', django_iban.fields.IBANField(max_length=34)),
                ('swift_bic', django_iban.fields.SWIFTBICField(blank=True, max_length=11, null=True, verbose_name='BIC no')),
                ('personno', models.CharField(max_length=11, validators=[expenseapp.models.validate_hetu_or_businessid], verbose_name='Person number')),
                ('description', models.CharField(max_length=255, verbose_name='Purpose')),
                ('memo', models.TextField(help_text='Names of the additional passengers, people in the meeting etc.', verbose_name='Info')),
                ('status', models.IntegerField(choices=[(0, 'Open'), (1, 'Sent')], default=0, verbose_name='Status')),
                ('katre_status', models.IntegerField(choices=[(0, 'Open'), (1, 'Not needed'), (2, 'Sent')], default=0, verbose_name='Katre status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Sent')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Edited')),
            ],
        ),
        migrations.CreateModel(
            name='ExpenseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('type', models.CharField(choices=[('T', 'Mileage'), ('FPD', 'Full per diem'), ('PPD', 'Partial per diem'), ('FOPD', 'Foreign per diem'), ('MA', 'Meal allowance'), ('O', 'Other')], max_length=5, verbose_name='Type')),
                ('requires_receipt', models.BooleanField(default=False, verbose_name='Requires receipt')),
                ('multiplier', models.DecimalField(decimal_places=2, help_text='The per price for the expense type (mileage: € per km, other expenses: 1, advances: -1)', max_digits=10, verbose_name='Multiplier')),
                ('requires_endtime', models.BooleanField(default=False, verbose_name='Requires ending time')),
                ('persontype', models.IntegerField(blank=True, choices=[(1, 'Trustee'), (2, 'Employee')], default=None, null=True, verbose_name='Person type')),
                ('account', models.CharField(max_length=20, verbose_name='Account')),
                ('unit', models.CharField(choices=[('km', 'km'), ('d', 'days'), ('pcs', 'pieces'), ('EUR', '€')], max_length=5, verbose_name='Unit')),
            ],
            options={
                'ordering': ('organisation', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator('^\\+?[0-9]{7,13}', 'Enter a valid phone number without any spaces or dashes.')], verbose_name='Phone')),
                ('address', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(255)], verbose_name='Address')),
                ('iban', django_iban.fields.IBANField(max_length=34)),
                ('swift_bic', django_iban.fields.SWIFTBICField(blank=True, max_length=11, null=True, verbose_name='BIC no')),
                ('personno', models.CharField(blank=True, help_text="Person number is required for every expense application for annual announcements to the tax authority. If you don't want to save it here, you can enter it to each expense application separately.", max_length=11, null=True, validators=[expenseapp.models.validate_hetu_or_businessid], verbose_name='Person number')),
                ('type', models.IntegerField(choices=[(1, 'Trustee'), (2, 'Employee')], default=1, verbose_name='Type')),
                ('language', models.CharField(blank=True, choices=[('fi-FI', 'Finnish'), ('sv-SE', 'Swedish'), ('en-EN', 'English')], max_length=6, null=True, verbose_name='Site language')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('business_id', models.CharField(max_length=9, validators=[django.core.validators.RegexValidator('^[0-9]{1,7}-[0-9]$', 'Enter a valid Finnish business ID.')], verbose_name='Business ID')),
                ('emce_id', models.CharField(blank=True, max_length=128, null=True, verbose_name='EmCe yritystunnus')),
                ('katre_cert_business_id', models.CharField(blank=True, max_length=9, null=True, validators=[django.core.validators.RegexValidator('^[0-9]{1,7}-[0-9]$', 'Enter a valid Finnish business ID.')], verbose_name='Katre-varmenteen Y-tunnus')),
                ('active', models.BooleanField(verbose_name='Selectable')),
                ('send_active', models.BooleanField(verbose_name='Send active')),
                ('default_expense_type', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='+', to='expenseapp.ExpenseType')),
            ],
        ),
        migrations.AddField(
            model_name='expensetype',
            name='organisation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='expenseapp.Organisation'),
        ),
        migrations.CreateModel(
            name='ExpenseLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(help_text='Description of the expense, eg. the route of the journey (travel expenses) or purpose of the purchased goods', max_length=255, verbose_name='Description')),
                ('begin_at', models.DateTimeField(verbose_name='Begin at')),
                ('ended_at', models.DateTimeField(blank=True, null=True, verbose_name='Ended at')),
                ('basis', models.DecimalField(decimal_places=2, help_text='Amount of kilometres, days or the sum of the expense', max_digits=10, verbose_name='Amount')),
                ('receipt', models.FileField(blank=True, help_text='A scan or picture of the receipt. Accepted formats include PDF, PNG and JPG. Note: The receipt must clearly show what, when and how much has been paid!', null=True, upload_to=expenseapp.models.wrapper, verbose_name='Receipt')),
                ('expensetype_name', models.CharField(max_length=255, verbose_name='Name')),
                ('expensetype_type', models.CharField(choices=[('T', 'Mileage'), ('FPD', 'Full per diem'), ('PPD', 'Partial per diem'), ('FOPD', 'Foreign per diem'), ('MA', 'Meal allowance'), ('O', 'Other')], max_length=5, verbose_name='Type')),
                ('multiplier', models.DecimalField(decimal_places=2, help_text='The per price for the expense type (mileage: € per km, other expenses: 1, advances: -1)', max_digits=10, verbose_name='Multiplier')),
                ('accountdimension', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='expenseapp.AccountDimension', verbose_name='Cost centre')),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='expenseapp.Expense')),
                ('expensetype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='expenseapp.ExpenseType', verbose_name='Expense type')),
            ],
        ),
        migrations.AddField(
            model_name='expense',
            name='organisation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='expenseapp.Organisation'),
        ),
        migrations.AddField(
            model_name='expense',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountdimension',
            name='organisation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='expenseapp.Organisation'),
        ),
    ]
